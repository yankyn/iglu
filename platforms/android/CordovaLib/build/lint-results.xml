<?xml version="1.0" encoding="UTF-8"?>
<issues format="4" by="lint 24.0.2">

    <issue
        id="Assert"
        severity="Warning"
        message="Assertions are unreliable. Use BuildConfig.DEBUG conditional checks instead."
        category="Correctness"
        priority="6"
        summary="Looks for usages of the assert keyword"
        explanation="Assertions are not checked at runtime. There are ways to request that they be used by Dalvik (`adb shell setprop debug.assert 1`), but the property is ignored in many places and can not be relied upon. Instead, perform conditional checking inside `if (BuildConfig.DEBUG) { }` blocks. That constant is a static final boolean which is true in debug builds and false in release builds, and the Java compiler completely removes all code inside the if-body from the app.

For example, you can replace `assert speed > 0` with `if (BuildConfig.DEBUG &amp;&amp; !(speed > 0)) { throw new AssertionError() }`.

(Note: This lint check does not flag assertions purely asserting nullness or non-nullness; these are typically more intended for tools usage than runtime checks.)"
        url="https://code.google.com/p/android/issues/detail?id=65183"
        urls="https://code.google.com/p/android/issues/detail?id=65183"
        errorLine1="    assert (!Thread.holdsLock(this));"
        errorLine2="    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="E:\work\iglu\platforms\android\CordovaLib\src\com\squareup\okhttp\internal\spdy\SpdyConnection.java"
            line="305"
            column="5"/>
    </issue>

    <issue
        id="Assert"
        severity="Warning"
        message="Assertions are unreliable. Use BuildConfig.DEBUG conditional checks instead."
        category="Correctness"
        priority="6"
        summary="Looks for usages of the assert keyword"
        explanation="Assertions are not checked at runtime. There are ways to request that they be used by Dalvik (`adb shell setprop debug.assert 1`), but the property is ignored in many places and can not be relied upon. Instead, perform conditional checking inside `if (BuildConfig.DEBUG) { }` blocks. That constant is a static final boolean which is true in debug builds and false in release builds, and the Java compiler completely removes all code inside the if-body from the app.

For example, you can replace `assert speed > 0` with `if (BuildConfig.DEBUG &amp;&amp; !(speed > 0)) { throw new AssertionError() }`.

(Note: This lint check does not flag assertions purely asserting nullness or non-nullness; these are typically more intended for tools usage than runtime checks.)"
        url="https://code.google.com/p/android/issues/detail?id=65183"
        urls="https://code.google.com/p/android/issues/detail?id=65183"
        errorLine1="    assert (!Thread.holdsLock(SpdyStream.this));"
        errorLine2="    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="E:\work\iglu\platforms\android\CordovaLib\src\com\squareup\okhttp\internal\spdy\SpdyStream.java"
            line="163"
            column="5"/>
    </issue>

    <issue
        id="Assert"
        severity="Warning"
        message="Assertions are unreliable. Use BuildConfig.DEBUG conditional checks instead."
        category="Correctness"
        priority="6"
        summary="Looks for usages of the assert keyword"
        explanation="Assertions are not checked at runtime. There are ways to request that they be used by Dalvik (`adb shell setprop debug.assert 1`), but the property is ignored in many places and can not be relied upon. Instead, perform conditional checking inside `if (BuildConfig.DEBUG) { }` blocks. That constant is a static final boolean which is true in debug builds and false in release builds, and the Java compiler completely removes all code inside the if-body from the app.

For example, you can replace `assert speed > 0` with `if (BuildConfig.DEBUG &amp;&amp; !(speed > 0)) { throw new AssertionError() }`.

(Note: This lint check does not flag assertions purely asserting nullness or non-nullness; these are typically more intended for tools usage than runtime checks.)"
        url="https://code.google.com/p/android/issues/detail?id=65183"
        urls="https://code.google.com/p/android/issues/detail?id=65183"
        errorLine1="    assert (!Thread.holdsLock(this));"
        errorLine2="    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="E:\work\iglu\platforms\android\CordovaLib\src\com\squareup\okhttp\internal\spdy\SpdyStream.java"
            line="240"
            column="5"/>
    </issue>

    <issue
        id="Assert"
        severity="Warning"
        message="Assertions are unreliable. Use BuildConfig.DEBUG conditional checks instead."
        category="Correctness"
        priority="6"
        summary="Looks for usages of the assert keyword"
        explanation="Assertions are not checked at runtime. There are ways to request that they be used by Dalvik (`adb shell setprop debug.assert 1`), but the property is ignored in many places and can not be relied upon. Instead, perform conditional checking inside `if (BuildConfig.DEBUG) { }` blocks. That constant is a static final boolean which is true in debug builds and false in release builds, and the Java compiler completely removes all code inside the if-body from the app.

For example, you can replace `assert speed > 0` with `if (BuildConfig.DEBUG &amp;&amp; !(speed > 0)) { throw new AssertionError() }`.

(Note: This lint check does not flag assertions purely asserting nullness or non-nullness; these are typically more intended for tools usage than runtime checks.)"
        url="https://code.google.com/p/android/issues/detail?id=65183"
        urls="https://code.google.com/p/android/issues/detail?id=65183"
        errorLine1="    assert (!Thread.holdsLock(SpdyStream.this));"
        errorLine2="    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="E:\work\iglu\platforms\android\CordovaLib\src\com\squareup\okhttp\internal\spdy\SpdyStream.java"
            line="256"
            column="5"/>
    </issue>

    <issue
        id="Assert"
        severity="Warning"
        message="Assertions are unreliable. Use BuildConfig.DEBUG conditional checks instead."
        category="Correctness"
        priority="6"
        summary="Looks for usages of the assert keyword"
        explanation="Assertions are not checked at runtime. There are ways to request that they be used by Dalvik (`adb shell setprop debug.assert 1`), but the property is ignored in many places and can not be relied upon. Instead, perform conditional checking inside `if (BuildConfig.DEBUG) { }` blocks. That constant is a static final boolean which is true in debug builds and false in release builds, and the Java compiler completely removes all code inside the if-body from the app.

For example, you can replace `assert speed > 0` with `if (BuildConfig.DEBUG &amp;&amp; !(speed > 0)) { throw new AssertionError() }`.

(Note: This lint check does not flag assertions purely asserting nullness or non-nullness; these are typically more intended for tools usage than runtime checks.)"
        url="https://code.google.com/p/android/issues/detail?id=65183"
        urls="https://code.google.com/p/android/issues/detail?id=65183"
        errorLine1="    assert (!Thread.holdsLock(SpdyStream.this));"
        errorLine2="    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="E:\work\iglu\platforms\android\CordovaLib\src\com\squareup\okhttp\internal\spdy\SpdyStream.java"
            line="287"
            column="5"/>
    </issue>

    <issue
        id="Assert"
        severity="Warning"
        message="Assertions are unreliable. Use BuildConfig.DEBUG conditional checks instead."
        category="Correctness"
        priority="6"
        summary="Looks for usages of the assert keyword"
        explanation="Assertions are not checked at runtime. There are ways to request that they be used by Dalvik (`adb shell setprop debug.assert 1`), but the property is ignored in many places and can not be relied upon. Instead, perform conditional checking inside `if (BuildConfig.DEBUG) { }` blocks. That constant is a static final boolean which is true in debug builds and false in release builds, and the Java compiler completely removes all code inside the if-body from the app.

For example, you can replace `assert speed > 0` with `if (BuildConfig.DEBUG &amp;&amp; !(speed > 0)) { throw new AssertionError() }`.

(Note: This lint check does not flag assertions purely asserting nullness or non-nullness; these are typically more intended for tools usage than runtime checks.)"
        url="https://code.google.com/p/android/issues/detail?id=65183"
        urls="https://code.google.com/p/android/issues/detail?id=65183"
        errorLine1="    assert (!Thread.holdsLock(SpdyStream.this));"
        errorLine2="    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="E:\work\iglu\platforms\android\CordovaLib\src\com\squareup\okhttp\internal\spdy\SpdyStream.java"
            line="292"
            column="5"/>
    </issue>

    <issue
        id="Assert"
        severity="Warning"
        message="Assertions are unreliable. Use BuildConfig.DEBUG conditional checks instead."
        category="Correctness"
        priority="6"
        summary="Looks for usages of the assert keyword"
        explanation="Assertions are not checked at runtime. There are ways to request that they be used by Dalvik (`adb shell setprop debug.assert 1`), but the property is ignored in many places and can not be relied upon. Instead, perform conditional checking inside `if (BuildConfig.DEBUG) { }` blocks. That constant is a static final boolean which is true in debug builds and false in release builds, and the Java compiler completely removes all code inside the if-body from the app.

For example, you can replace `assert speed > 0` with `if (BuildConfig.DEBUG &amp;&amp; !(speed > 0)) { throw new AssertionError() }`.

(Note: This lint check does not flag assertions purely asserting nullness or non-nullness; these are typically more intended for tools usage than runtime checks.)"
        url="https://code.google.com/p/android/issues/detail?id=65183"
        urls="https://code.google.com/p/android/issues/detail?id=65183"
        errorLine1="    assert (Thread.holdsLock(connection)); // Because &apos;settings&apos; is guarded by &apos;connection&apos;."
        errorLine2="    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="E:\work\iglu\platforms\android\CordovaLib\src\com\squareup\okhttp\internal\spdy\SpdyStream.java"
            line="314"
            column="5"/>
    </issue>

    <issue
        id="Assert"
        severity="Warning"
        message="Assertions are unreliable. Use BuildConfig.DEBUG conditional checks instead."
        category="Correctness"
        priority="6"
        summary="Looks for usages of the assert keyword"
        explanation="Assertions are not checked at runtime. There are ways to request that they be used by Dalvik (`adb shell setprop debug.assert 1`), but the property is ignored in many places and can not be relied upon. Instead, perform conditional checking inside `if (BuildConfig.DEBUG) { }` blocks. That constant is a static final boolean which is true in debug builds and false in release builds, and the Java compiler completely removes all code inside the if-body from the app.

For example, you can replace `assert speed > 0` with `if (BuildConfig.DEBUG &amp;&amp; !(speed > 0)) { throw new AssertionError() }`.

(Note: This lint check does not flag assertions purely asserting nullness or non-nullness; these are typically more intended for tools usage than runtime checks.)"
        url="https://code.google.com/p/android/issues/detail?id=65183"
        urls="https://code.google.com/p/android/issues/detail?id=65183"
        errorLine1="    assert (Thread.holdsLock(this));"
        errorLine2="    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="E:\work\iglu\platforms\android\CordovaLib\src\com\squareup\okhttp\internal\spdy\SpdyStream.java"
            line="321"
            column="5"/>
    </issue>

    <issue
        id="Assert"
        severity="Warning"
        message="Assertions are unreliable. Use BuildConfig.DEBUG conditional checks instead."
        category="Correctness"
        priority="6"
        summary="Looks for usages of the assert keyword"
        explanation="Assertions are not checked at runtime. There are ways to request that they be used by Dalvik (`adb shell setprop debug.assert 1`), but the property is ignored in many places and can not be relied upon. Instead, perform conditional checking inside `if (BuildConfig.DEBUG) { }` blocks. That constant is a static final boolean which is true in debug builds and false in release builds, and the Java compiler completely removes all code inside the if-body from the app.

For example, you can replace `assert speed > 0` with `if (BuildConfig.DEBUG &amp;&amp; !(speed > 0)) { throw new AssertionError() }`.

(Note: This lint check does not flag assertions purely asserting nullness or non-nullness; these are typically more intended for tools usage than runtime checks.)"
        url="https://code.google.com/p/android/issues/detail?id=65183"
        urls="https://code.google.com/p/android/issues/detail?id=65183"
        errorLine1="      assert (!Thread.holdsLock(SpdyStream.this));"
        errorLine2="      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="E:\work\iglu\platforms\android\CordovaLib\src\com\squareup\okhttp\internal\spdy\SpdyStream.java"
            line="470"
            column="7"/>
    </issue>

    <issue
        id="Assert"
        severity="Warning"
        message="Assertions are unreliable. Use BuildConfig.DEBUG conditional checks instead."
        category="Correctness"
        priority="6"
        summary="Looks for usages of the assert keyword"
        explanation="Assertions are not checked at runtime. There are ways to request that they be used by Dalvik (`adb shell setprop debug.assert 1`), but the property is ignored in many places and can not be relied upon. Instead, perform conditional checking inside `if (BuildConfig.DEBUG) { }` blocks. That constant is a static final boolean which is true in debug builds and false in release builds, and the Java compiler completely removes all code inside the if-body from the app.

For example, you can replace `assert speed > 0` with `if (BuildConfig.DEBUG &amp;&amp; !(speed > 0)) { throw new AssertionError() }`.

(Note: This lint check does not flag assertions purely asserting nullness or non-nullness; these are typically more intended for tools usage than runtime checks.)"
        url="https://code.google.com/p/android/issues/detail?id=65183"
        urls="https://code.google.com/p/android/issues/detail?id=65183"
        errorLine1="    assert (!Thread.holdsLock(SpdyStream.this));"
        errorLine2="    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="E:\work\iglu\platforms\android\CordovaLib\src\com\squareup\okhttp\internal\spdy\SpdyStream.java"
            line="548"
            column="5"/>
    </issue>

    <issue
        id="Assert"
        severity="Warning"
        message="Assertions are unreliable. Use BuildConfig.DEBUG conditional checks instead."
        category="Correctness"
        priority="6"
        summary="Looks for usages of the assert keyword"
        explanation="Assertions are not checked at runtime. There are ways to request that they be used by Dalvik (`adb shell setprop debug.assert 1`), but the property is ignored in many places and can not be relied upon. Instead, perform conditional checking inside `if (BuildConfig.DEBUG) { }` blocks. That constant is a static final boolean which is true in debug builds and false in release builds, and the Java compiler completely removes all code inside the if-body from the app.

For example, you can replace `assert speed > 0` with `if (BuildConfig.DEBUG &amp;&amp; !(speed > 0)) { throw new AssertionError() }`.

(Note: This lint check does not flag assertions purely asserting nullness or non-nullness; these are typically more intended for tools usage than runtime checks.)"
        url="https://code.google.com/p/android/issues/detail?id=65183"
        urls="https://code.google.com/p/android/issues/detail?id=65183"
        errorLine1="      assert (!Thread.holdsLock(SpdyStream.this));"
        errorLine2="      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="E:\work\iglu\platforms\android\CordovaLib\src\com\squareup\okhttp\internal\spdy\SpdyStream.java"
            line="595"
            column="7"/>
    </issue>

    <issue
        id="Assert"
        severity="Warning"
        message="Assertions are unreliable. Use BuildConfig.DEBUG conditional checks instead."
        category="Correctness"
        priority="6"
        summary="Looks for usages of the assert keyword"
        explanation="Assertions are not checked at runtime. There are ways to request that they be used by Dalvik (`adb shell setprop debug.assert 1`), but the property is ignored in many places and can not be relied upon. Instead, perform conditional checking inside `if (BuildConfig.DEBUG) { }` blocks. That constant is a static final boolean which is true in debug builds and false in release builds, and the Java compiler completely removes all code inside the if-body from the app.

For example, you can replace `assert speed > 0` with `if (BuildConfig.DEBUG &amp;&amp; !(speed > 0)) { throw new AssertionError() }`.

(Note: This lint check does not flag assertions purely asserting nullness or non-nullness; these are typically more intended for tools usage than runtime checks.)"
        url="https://code.google.com/p/android/issues/detail?id=65183"
        urls="https://code.google.com/p/android/issues/detail?id=65183"
        errorLine1="      assert (!Thread.holdsLock(SpdyStream.this));"
        errorLine2="      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="E:\work\iglu\platforms\android\CordovaLib\src\com\squareup\okhttp\internal\spdy\SpdyStream.java"
            line="612"
            column="7"/>
    </issue>

    <issue
        id="Assert"
        severity="Warning"
        message="Assertions are unreliable. Use BuildConfig.DEBUG conditional checks instead."
        category="Correctness"
        priority="6"
        summary="Looks for usages of the assert keyword"
        explanation="Assertions are not checked at runtime. There are ways to request that they be used by Dalvik (`adb shell setprop debug.assert 1`), but the property is ignored in many places and can not be relied upon. Instead, perform conditional checking inside `if (BuildConfig.DEBUG) { }` blocks. That constant is a static final boolean which is true in debug builds and false in release builds, and the Java compiler completely removes all code inside the if-body from the app.

For example, you can replace `assert speed > 0` with `if (BuildConfig.DEBUG &amp;&amp; !(speed > 0)) { throw new AssertionError() }`.

(Note: This lint check does not flag assertions purely asserting nullness or non-nullness; these are typically more intended for tools usage than runtime checks.)"
        url="https://code.google.com/p/android/issues/detail?id=65183"
        urls="https://code.google.com/p/android/issues/detail?id=65183"
        errorLine1="      assert (!Thread.holdsLock(SpdyStream.this));"
        errorLine2="      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="E:\work\iglu\platforms\android\CordovaLib\src\com\squareup\okhttp\internal\spdy\SpdyStream.java"
            line="621"
            column="7"/>
    </issue>

    <issue
        id="Assert"
        severity="Warning"
        message="Assertions are unreliable. Use BuildConfig.DEBUG conditional checks instead."
        category="Correctness"
        priority="6"
        summary="Looks for usages of the assert keyword"
        explanation="Assertions are not checked at runtime. There are ways to request that they be used by Dalvik (`adb shell setprop debug.assert 1`), but the property is ignored in many places and can not be relied upon. Instead, perform conditional checking inside `if (BuildConfig.DEBUG) { }` blocks. That constant is a static final boolean which is true in debug builds and false in release builds, and the Java compiler completely removes all code inside the if-body from the app.

For example, you can replace `assert speed > 0` with `if (BuildConfig.DEBUG &amp;&amp; !(speed > 0)) { throw new AssertionError() }`.

(Note: This lint check does not flag assertions purely asserting nullness or non-nullness; these are typically more intended for tools usage than runtime checks.)"
        url="https://code.google.com/p/android/issues/detail?id=65183"
        urls="https://code.google.com/p/android/issues/detail?id=65183"
        errorLine1="      assert (!Thread.holdsLock(SpdyStream.this));"
        errorLine2="      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="E:\work\iglu\platforms\android\CordovaLib\src\com\squareup\okhttp\internal\spdy\SpdyStream.java"
            line="636"
            column="7"/>
    </issue>

    <issue
        id="DefaultLocale"
        severity="Warning"
        message="Implicitly using the default locale is a common source of bugs: Use toLowerCase(Locale) instead"
        category="Correctness"
        priority="6"
        summary="Finds calls to locale-ambiguous `String` manipulation methods"
        explanation="Calling `String#toLowerCase()` or `#toUpperCase()` *without specifying an explicit locale* is a common source of bugs. The reason for that is that those methods will use the current locale on the user&apos;s device, and even though the code appears to work correctly when you are developing the app, it will fail in some locales. For example, in the Turkish locale, the uppercase replacement for `i` is *not* `I`.

If you want the methods to just perform ASCII replacement, for example to convert an enum name, call `String#toUpperCase(Locale.US)` instead. If you really want to use the current locale, call `String#toUpperCase(Locale.getDefault())` instead."
        url="http://developer.android.com/reference/java/util/Locale.html#default_locale"
        urls="http://developer.android.com/reference/java/util/Locale.html#default_locale"
        errorLine1="        this.getIntent().putExtra(name.toLowerCase(), value);"
        errorLine2="                                       ~~~~~~~~~~~">
        <location
            file="E:\work\iglu\platforms\android\CordovaLib\src\org\apache\cordova\CordovaActivity.java"
            line="519"
            column="40"/>
    </issue>

    <issue
        id="DefaultLocale"
        severity="Warning"
        message="Implicitly using the default locale is a common source of bugs: Use toLowerCase(Locale) instead"
        category="Correctness"
        priority="6"
        summary="Finds calls to locale-ambiguous `String` manipulation methods"
        explanation="Calling `String#toLowerCase()` or `#toUpperCase()` *without specifying an explicit locale* is a common source of bugs. The reason for that is that those methods will use the current locale on the user&apos;s device, and even though the code appears to work correctly when you are developing the app, it will fail in some locales. For example, in the Turkish locale, the uppercase replacement for `i` is *not* `I`.

If you want the methods to just perform ASCII replacement, for example to convert an enum name, call `String#toUpperCase(Locale.US)` instead. If you really want to use the current locale, call `String#toUpperCase(Locale.getDefault())` instead."
        url="http://developer.android.com/reference/java/util/Locale.html#default_locale"
        urls="http://developer.android.com/reference/java/util/Locale.html#default_locale"
        errorLine1="        this.getIntent().putExtra(name.toLowerCase(), value);"
        errorLine2="                                       ~~~~~~~~~~~">
        <location
            file="E:\work\iglu\platforms\android\CordovaLib\src\org\apache\cordova\CordovaActivity.java"
            line="534"
            column="40"/>
    </issue>

    <issue
        id="DefaultLocale"
        severity="Warning"
        message="Implicitly using the default locale is a common source of bugs: Use toLowerCase(Locale) instead"
        category="Correctness"
        priority="6"
        summary="Finds calls to locale-ambiguous `String` manipulation methods"
        explanation="Calling `String#toLowerCase()` or `#toUpperCase()` *without specifying an explicit locale* is a common source of bugs. The reason for that is that those methods will use the current locale on the user&apos;s device, and even though the code appears to work correctly when you are developing the app, it will fail in some locales. For example, in the Turkish locale, the uppercase replacement for `i` is *not* `I`.

If you want the methods to just perform ASCII replacement, for example to convert an enum name, call `String#toUpperCase(Locale.US)` instead. If you really want to use the current locale, call `String#toUpperCase(Locale.getDefault())` instead."
        url="http://developer.android.com/reference/java/util/Locale.html#default_locale"
        urls="http://developer.android.com/reference/java/util/Locale.html#default_locale"
        errorLine1="        this.getIntent().putExtra(name.toLowerCase(), value);"
        errorLine2="                                       ~~~~~~~~~~~">
        <location
            file="E:\work\iglu\platforms\android\CordovaLib\src\org\apache\cordova\CordovaActivity.java"
            line="549"
            column="40"/>
    </issue>

    <issue
        id="DefaultLocale"
        severity="Warning"
        message="Implicitly using the default locale is a common source of bugs: Use toLowerCase(Locale) instead"
        category="Correctness"
        priority="6"
        summary="Finds calls to locale-ambiguous `String` manipulation methods"
        explanation="Calling `String#toLowerCase()` or `#toUpperCase()` *without specifying an explicit locale* is a common source of bugs. The reason for that is that those methods will use the current locale on the user&apos;s device, and even though the code appears to work correctly when you are developing the app, it will fail in some locales. For example, in the Turkish locale, the uppercase replacement for `i` is *not* `I`.

If you want the methods to just perform ASCII replacement, for example to convert an enum name, call `String#toUpperCase(Locale.US)` instead. If you really want to use the current locale, call `String#toUpperCase(Locale.getDefault())` instead."
        url="http://developer.android.com/reference/java/util/Locale.html#default_locale"
        urls="http://developer.android.com/reference/java/util/Locale.html#default_locale"
        errorLine1="        this.getIntent().putExtra(name.toLowerCase(), value);"
        errorLine2="                                       ~~~~~~~~~~~">
        <location
            file="E:\work\iglu\platforms\android\CordovaLib\src\org\apache\cordova\CordovaActivity.java"
            line="564"
            column="40"/>
    </issue>

    <issue
        id="InlinedApi"
        severity="Warning"
        message="Field requires API level 11 (current min is 10): android.media.ExifInterface#TAG_APERTURE"
        category="Correctness"
        priority="6"
        summary="Finds inlined fields that may or may not work on older platforms"
        explanation="This check scans through all the Android API field references in the application and flags certain constants, such as static final integers and Strings, which were introduced in later versions. These will actually be copied into the class files rather than being referenced, which means that the value is available even when running on older devices. In some cases that&apos;s fine, and in other cases it can result in a runtime crash or incorrect behavior. It depends on the context, so consider the code carefully and device whether it&apos;s safe and can be suppressed or whether the code needs tbe guarded.

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `AndroidManifest.xml` file.
If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.
"
        errorLine1="        this.aperture = inFile.getAttribute(ExifInterface.TAG_APERTURE);"
        errorLine2="                                            ~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="E:\work\iglu\platforms\android\CordovaLib\src\org\apache\cordova\ExifHelper.java"
            line="74"
            column="45"/>
    </issue>

    <issue
        id="InlinedApi"
        severity="Warning"
        message="Field requires API level 11 (current min is 10): android.media.ExifInterface#TAG_EXPOSURE_TIME"
        category="Correctness"
        priority="6"
        summary="Finds inlined fields that may or may not work on older platforms"
        explanation="This check scans through all the Android API field references in the application and flags certain constants, such as static final integers and Strings, which were introduced in later versions. These will actually be copied into the class files rather than being referenced, which means that the value is available even when running on older devices. In some cases that&apos;s fine, and in other cases it can result in a runtime crash or incorrect behavior. It depends on the context, so consider the code carefully and device whether it&apos;s safe and can be suppressed or whether the code needs tbe guarded.

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `AndroidManifest.xml` file.
If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.
"
        errorLine1="        this.exposureTime = inFile.getAttribute(ExifInterface.TAG_EXPOSURE_TIME);"
        errorLine2="                                                ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="E:\work\iglu\platforms\android\CordovaLib\src\org\apache\cordova\ExifHelper.java"
            line="76"
            column="49"/>
    </issue>

    <issue
        id="InlinedApi"
        severity="Warning"
        message="Field requires API level 11 (current min is 10): android.media.ExifInterface#TAG_ISO"
        category="Correctness"
        priority="6"
        summary="Finds inlined fields that may or may not work on older platforms"
        explanation="This check scans through all the Android API field references in the application and flags certain constants, such as static final integers and Strings, which were introduced in later versions. These will actually be copied into the class files rather than being referenced, which means that the value is available even when running on older devices. In some cases that&apos;s fine, and in other cases it can result in a runtime crash or incorrect behavior. It depends on the context, so consider the code carefully and device whether it&apos;s safe and can be suppressed or whether the code needs tbe guarded.

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `AndroidManifest.xml` file.
If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.
"
        errorLine1="        this.iso = inFile.getAttribute(ExifInterface.TAG_ISO);"
        errorLine2="                                       ~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="E:\work\iglu\platforms\android\CordovaLib\src\org\apache\cordova\ExifHelper.java"
            line="88"
            column="40"/>
    </issue>

    <issue
        id="InlinedApi"
        severity="Warning"
        message="Field requires API level 11 (current min is 10): android.media.ExifInterface#TAG_APERTURE"
        category="Correctness"
        priority="6"
        summary="Finds inlined fields that may or may not work on older platforms"
        explanation="This check scans through all the Android API field references in the application and flags certain constants, such as static final integers and Strings, which were introduced in later versions. These will actually be copied into the class files rather than being referenced, which means that the value is available even when running on older devices. In some cases that&apos;s fine, and in other cases it can result in a runtime crash or incorrect behavior. It depends on the context, so consider the code carefully and device whether it&apos;s safe and can be suppressed or whether the code needs tbe guarded.

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `AndroidManifest.xml` file.
If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.
"
        errorLine1="            this.outFile.setAttribute(ExifInterface.TAG_APERTURE, this.aperture);"
        errorLine2="                                      ~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="E:\work\iglu\platforms\android\CordovaLib\src\org\apache\cordova\ExifHelper.java"
            line="107"
            column="39"/>
    </issue>

    <issue
        id="InlinedApi"
        severity="Warning"
        message="Field requires API level 11 (current min is 10): android.media.ExifInterface#TAG_EXPOSURE_TIME"
        category="Correctness"
        priority="6"
        summary="Finds inlined fields that may or may not work on older platforms"
        explanation="This check scans through all the Android API field references in the application and flags certain constants, such as static final integers and Strings, which were introduced in later versions. These will actually be copied into the class files rather than being referenced, which means that the value is available even when running on older devices. In some cases that&apos;s fine, and in other cases it can result in a runtime crash or incorrect behavior. It depends on the context, so consider the code carefully and device whether it&apos;s safe and can be suppressed or whether the code needs tbe guarded.

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `AndroidManifest.xml` file.
If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.
"
        errorLine1="            this.outFile.setAttribute(ExifInterface.TAG_EXPOSURE_TIME, this.exposureTime);"
        errorLine2="                                      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="E:\work\iglu\platforms\android\CordovaLib\src\org\apache\cordova\ExifHelper.java"
            line="113"
            column="39"/>
    </issue>

    <issue
        id="InlinedApi"
        severity="Warning"
        message="Field requires API level 11 (current min is 10): android.media.ExifInterface#TAG_ISO"
        category="Correctness"
        priority="6"
        summary="Finds inlined fields that may or may not work on older platforms"
        explanation="This check scans through all the Android API field references in the application and flags certain constants, such as static final integers and Strings, which were introduced in later versions. These will actually be copied into the class files rather than being referenced, which means that the value is available even when running on older devices. In some cases that&apos;s fine, and in other cases it can result in a runtime crash or incorrect behavior. It depends on the context, so consider the code carefully and device whether it&apos;s safe and can be suppressed or whether the code needs tbe guarded.

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `AndroidManifest.xml` file.
If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.
"
        errorLine1="            this.outFile.setAttribute(ExifInterface.TAG_ISO, this.iso);"
        errorLine2="                                      ~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="E:\work\iglu\platforms\android\CordovaLib\src\org\apache\cordova\ExifHelper.java"
            line="149"
            column="39"/>
    </issue>

    <issue
        id="GradleDependency"
        severity="Warning"
        message="Old buildToolsVersion; recommended version is 19.1.0 or later"
        category="Correctness"
        priority="4"
        summary="Looks for old or obsolete Gradle library dependencies"
        explanation="This detector looks for usages of libraries where the version you are using is not the current stable release. Using older versions is fine, and there are cases where you deliberately want to stick with an older version. However, you may simply not be aware that a more recent version is available, and that is what this lint check helps find."
        errorLine1="    buildToolsVersion &quot;19.0.0&quot;"
        errorLine2="    ~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="E:\work\iglu\platforms\android\CordovaLib\build.gradle"
            line="36"
            column="5"/>
    </issue>

    <issue
        id="AddJavascriptInterface"
        severity="Warning"
        message="WebView.addJavascriptInterface should not be called"
        category="Security"
        priority="9"
        summary="Checks that `WebView#addJavascriptInterface` is not called for API levels below 17"
        explanation="For applications built for API levels below 17, `WebView#addJavascriptInterface` presents a security hazard as JavaScript on the target web page has the ability to use reflection to access the injected object&apos;s public fields and thus manipulate the host application in unintended ways."
        url="https://labs.mwrinfosecurity.com/blog/2013/09/24/webview-addjavascriptinterface-remote-code-execution/"
        urls="https://labs.mwrinfosecurity.com/blog/2013/09/24/webview-addjavascriptinterface-remote-code-execution/"
        errorLine1="        this.addJavascriptInterface(new ExposedJsApi(bridge), &quot;_cordovaNative&quot;);"
        errorLine2="             ~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="E:\work\iglu\platforms\android\CordovaLib\src\org\apache\cordova\CordovaWebView.java"
            line="305"
            column="14"/>
    </issue>

    <issue
        id="AllowBackup"
        severity="Warning"
        message="Should explicitly set android:allowBackup to true or false (it&apos;s true by default, and that can have some security implications for the application&apos;s data)"
        category="Security"
        priority="3"
        summary="Ensure that allowBackup is explicitly set in the application&apos;s manifest"
        explanation="The allowBackup attribute determines if an application&apos;s data can be backed up and restored. It is documented at http://developer.android.com/reference/android/R.attr.html#allowBackup

By default, this flag is set to `true`. When this flag is set to `true`, application data can be backed up and restored by the user using `adb backup` and `adb restore`.

This may have security consequences for an application. `adb backup` allows users who have enabled USB debugging to copy application data off of the device. Once backed up, all application data can be read by the user. `adb restore` allows creation of application data from a source specified by the user. Following a restore, applications should not assume that the data, file permissions, and directory permissions were created by the application itself.

Setting `allowBackup=&quot;false&quot;` opts an application out of both backup and restore.

To fix this warning, decide whether your application should support backup, and explicitly set `android:allowBackup=(true|false)&quot;`"
        url="http://developer.android.com/reference/android/R.attr.html#allowBackup"
        urls="http://developer.android.com/reference/android/R.attr.html#allowBackup"
        quickfix="adt">
        <location
            file="E:\work\iglu\platforms\android\CordovaLib\AndroidManifest.xml"/>
    </issue>

    <issue
        id="UseSparseArrays"
        severity="Warning"
        message="Use new SparseArray&lt;SpdyStream>(...) instead for better performance"
        category="Performance"
        priority="4"
        summary="Looks for opportunities to replace HashMaps with the more efficient SparseArray"
        explanation="For maps where the keys are of type integer, it&apos;s typically more efficient to use the Android `SparseArray` API. This check identifies scenarios where you might want to consider using `SparseArray` instead of `HashMap` for better performance.

This is *particularly* useful when the value types are primitives like ints, where you can use `SparseIntArray` and avoid auto-boxing the values from `int` to `Integer`.

If you need to construct a `HashMap` because you need to call an API outside of your control which requires a `Map`, you can suppress this warning using for example the `@SuppressLint` annotation."
        errorLine1="  private final Map&lt;Integer, SpdyStream> streams = new HashMap&lt;Integer, SpdyStream>();"
        errorLine2="                                                   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="E:\work\iglu\platforms\android\CordovaLib\src\com\squareup\okhttp\internal\spdy\SpdyConnection.java"
            line="76"
            column="52"/>
    </issue>

    <issue
        id="UseSparseArrays"
        severity="Warning"
        message="Use new SparseArray&lt;Ping>(...) instead for better performance"
        category="Performance"
        priority="4"
        summary="Looks for opportunities to replace HashMaps with the more efficient SparseArray"
        explanation="For maps where the keys are of type integer, it&apos;s typically more efficient to use the Android `SparseArray` API. This check identifies scenarios where you might want to consider using `SparseArray` instead of `HashMap` for better performance.

This is *particularly* useful when the value types are primitives like ints, where you can use `SparseIntArray` and avoid auto-boxing the values from `int` to `Integer`.

If you need to construct a `HashMap` because you need to call an API outside of your control which requires a `Map`, you can suppress this warning using for example the `@SuppressLint` annotation."
        errorLine1="      if (pings == null) pings = new HashMap&lt;Integer, Ping>();"
        errorLine2="                                 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="E:\work\iglu\platforms\android\CordovaLib\src\com\squareup\okhttp\internal\spdy\SpdyConnection.java"
            line="234"
            column="34"/>
    </issue>

    <issue
        id="ViewConstructor"
        severity="Warning"
        message="Custom view LinearLayoutSoftKeyboardDetect is missing constructor used by tools: (Context) or (Context,AttributeSet) or (Context,AttributeSet,int)"
        category="Usability"
        priority="3"
        summary="Checks that custom views define the expected constructors"
        explanation="Some layout tools (such as the Android layout editor for Studio &amp; Eclipse) needs to find a constructor with one of the following signatures:
* `View(Context context)`
* `View(Context context, AttributeSet attrs)`
* `View(Context context, AttributeSet attrs, int defStyle)`

If your custom view needs to perform initialization which does not apply when used in a layout editor, you can surround the given code with a check to see if `View#isInEditMode()` is false, since that method will return `false` at runtime but true within a user interface editor."
        errorLine1="public class LinearLayoutSoftKeyboardDetect extends LinearLayout {"
        errorLine2="             ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="E:\work\iglu\platforms\android\CordovaLib\src\org\apache\cordova\LinearLayoutSoftKeyboardDetect.java"
            line="30"
            column="14"/>
    </issue>

</issues>
